#!/usr/bin/env python3
# Copyright (C) 2022 Then Try This
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Common Good Public License Beta 1.0 as
# published at http://www.cgpl.org
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Common Good Public License Beta 1.0 for more details.

# This script creates a command line interface for building and updating
# the climate tool database, as well as providing documentation of the
# recipes for how it's done

import yaml
import os,sys
from builder import climate_db
from builder import ukcri
from builder import index_multiple_deprivation as imd
from builder import link_geom_climate
from builder import network_from_json
from builder import stats
from builder import nfvi_sfri
from builder import hierarchy
from builder import chessscape
from builder import tiff_loader
from builder import cache_climate

def load_config():
    with open('config.yml') as f:
        return yaml.load(f,Loader=yaml.FullLoader)

conf = load_config()
db = climate_db.db(conf)

# all tables should be dropped and recreated when rerunning commands

if len(sys.argv)<2 or sys.argv[1]=="-?" or sys.argv[1]=="--help":
    print("Welcome to the climate tool database builder")
else:
#    if sys.argv[1]=="uk_cri":
#        ukcri.load(db,conf['uk_cri_data_path'])

    if sys.argv[1]=="boundary_lsoa":
        db.load_shp_geom(conf['lsoa_data_shp'],"boundary_lsoa","27700")

    if sys.argv[1]=="boundary_msoa": 
        db.load_shp_geom(conf['msoa_data_shp'],"boundary_msoa","27700")

    if sys.argv[1]=="boundary_uk_counties": 
        db.load_shp_geom(conf['uk_counties_data_shp'],"boundary_uk_counties","32630") 

    if sys.argv[1]=="boundary_la_districts":
        db.load_shp_geom(conf['la_districts_data_shp'],"boundary_la_districts","27700")
    
    if sys.argv[1]=="boundary_sc_dz":
        db.load_shp_geom(conf['sc_dz_data_shp'],"boundary_sc_dz","4326")

    if sys.argv[1]=="boundary_parishes":
        db.load_shp_geom(conf['parishes_data_shp'],"boundary_parishes","27700")
    
    if sys.argv[1]=="link_lsoa":
        link_geom_climate.multi_clever(db,"boundary_lsoa","chess_scape_grid")

    if sys.argv[1]=="link_msoa":
        link_geom_climate.multi_clever(db,"boundary_msoa","chess_scape_grid")

    if sys.argv[1]=="link_uk_counties":
        link_geom_climate.multi_clever(db,"boundary_uk_counties","chess_scape_grid")

    if sys.argv[1]=="link_la_districts":
        link_geom_climate.multi_clever(db,"boundary_la_districts","chess_scape_grid")

    if sys.argv[1]=="link_sc_dz":
        link_geom_climate.multi_clever(db,"boundary_sc_dz","chess_scape_grid")

    if sys.argv[1]=="link_parishes":
        link_geom_climate.multi_clever(db,"boundary_parishes","chess_scape_grid")


    if sys.argv[1]=="cache_climate":
        for boundary in ["boundary_parishes"]: #,"boundary_la_districts","boundary_uk_counties","boundary_msoa","boundary_sc_dz","boundary_lsoa"]:
            for climate in ["chess_scape_rcp85_annual","chess_scape_rcp85_summer","chess_scape_rcp85_winter",
                            "chess_scape_rcp60_annual","chess_scape_rcp60_summer","chess_scape_rcp60_winter"]:
                cache_climate.cache_climate(db,boundary,climate)
                
        
    if sys.argv[1]=="add_imd":
        imd.prepare_col(db,"lsoa")
        imd.prepare_col(db,"msoa")
        imd.prepare_col(db,"counties")
        
    if sys.argv[1]=="lsoa_imd":
        # v slow
        imd.load_lsoa(db,conf['imd_data_lsoa_csv'])

    if sys.argv[1]=="msoa_imd":
        imd.load_msoa(db,conf['imd_data_msoa_csv'])

    if sys.argv[1]=="counties_imd":
        imd.load_counties(db);


        

        
    if sys.argv[1]=="stats":
        stats.compute(db)

    if sys.argv[1]=="nfvi_sfri":         
        db.load_shp_geom(conf['nfvi_sfri_shp'],"nfvi_sfri","27700")

    if sys.argv[1]=="link_nfvi_sfri_lsoa":         
        nfvi_sfri.import_to_lsoa(db)
        
    if sys.argv[1]=="hierarchy_msoa_to_lsoa":         
        hierarchy.lsoa_to_msoa(db)
        
    if sys.argv[1]=="hierarchy_county_to_lsoa":         
        hierarchy.lsoa_to_counties(db)
        
    if sys.argv[1]=="link_nfvi_sfri_msoa":         
        nfvi_sfri.import_to_table(db,"msoa","msoa")

    if sys.argv[1]=="link_nfvi_sfri_counties":         
        nfvi_sfri.import_to_table(db,"counties","county")

    # if sys.argv[1]=="chessscape_nuke":
    #     chessscape.nuke(db,"chessscape_seasonal")
        
    # if sys.argv[1]=="chessscape_seasonal":    
    #     chessscape.import_seasonal_data(db,conf['chess_seasonal_path'],sys.argv[2])

    # if sys.argv[1]=="chessscape_all":
    #     for variable in ["tas",
    #                      #"tasmin",
    #                      #"tasmax",
    #                      "sfcWind",
    #                      "pr",
    #                      "rlds",
    #                      "rsds"]:
    #         chessscape.import_seasonal_data(db,conf['chess_seasonal_path'],variable)

    # if sys.argv[1]=="chessscape_nuke_averages":
    #     chessscape.nuke_averages(db,"chessscape_seasonal_averages")
        
    # if sys.argv[1]=="chessscape_seasonal_averages":
    #     for variable in ["tas",
    #                      #"tasmin",
    #                      #"tasmax",
    #                      "sfcWind",
    #                      "pr",
    #                      "rlds",
    #                      "rsds"]:
    #         chessscape.import_seasonal_averages(db,conf['chess_seasonal_path'],variable)
            
    #if sys.argv[1]=="chessscape_grid":         
    #    chessscape.import_grid(db)
        
    if sys.argv[1]=="chess_tif_grid":         
        tiff_loader.import_grid(db,conf['chess_tiff_decades_path'],sys.argv[2])

    if sys.argv[1]=="chess_tif_print_crs":         
        tiff_loader.print_crs(sys.argv[2])
        
    if sys.argv[1]=="chess_tiff_nuke":
        for rcp in ['rcp60','rcp85']:
            for season in ["annual","summer","winter"]:
                tiff_loader.nuke(db,'chess_scape_'+rcp+'_'+season)

    if sys.argv[1]=="chess_tiff_create":    
        tiff_loader.create_averages(db,sys.argv[2],conf['chess_tiff_path'],sys.argv[3])
 
    if sys.argv[1]=="chess_tiff_create_batch":    
        for rcp in ['rcp60','rcp85']:
            for variable in ['tas','pr','rsds','sfcWind']:
                tiff_loader.create_averages(db,rcp,conf['chess_tiff_path'],variable)
       
    if sys.argv[1]=="chess_tiff_import":    
        for rcp in ['rcp60','rcp85']:
            for variable in ['tas','pr','rsds','sfcWind']:                
                tiff_loader.import_tiffs(db,conf['chess_tiff_decades_path'],rcp,variable)

    if sys.argv[1]=="network_json":
        network_from_json.load(db,conf['network_json'],"Heat")

    if sys.argv[1]=="network_refs":
        network_from_json.load_refs(db,conf['refs'])

    if sys.argv[1]=="network_nuke":
        network_from_json.reset(db)
        
    if sys.argv[1]=="all":
        #ukcri.load(db,conf['uk_cri_data_path'])
        #db.load_shp_geom(conf['lsoa_data_shp'],"lsoa","27700")
        #db.load_shp_geom(conf['msoa_data_shp'],"msoa","27700")
        #db.load_shp_geom(conf['counties_data_shp'],"counties","4326")
        #imd.prepare_col(db,"lsoa")
        #imd.prepare_col(db,"msoa")
        #imd.prepare_col(db,"counties")

        #link_geom_climate.simple(db,"lsoa")
        #link_geom_climate.multi(db,"msoa")
        #link_geom_climate.multi(db,"counties")

        #imd.load_msoa(db,conf['imd_data_msoa_csv'])
        #imd.load_counties(db);
        imd.load_lsoa(db,conf['imd_data_lsoa_csv'])


